

AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Buckets, Policies and Lambdas for the Smart Security Camera

Parameters:
  pImageBucketName:
    Description: Name of the bucket to hold the images
    Type: String

  pDeployBucket:
    Description: Name of Bucket where Lambda functions are copied
    Type: String

  pLambdaZipFile:
    Description: Key Name for the Lambda zip file in the Deploy Bucket 
    Type: String
    Default: lambda.zip

  pExtractLambdaZipFile:
    Description: Key Name for the KeyFrame Extract Lambda zip file in the Deploy Bucket  
    Type: String
    Default: lambda.zip

  pEnvironment:
    Description: This string is appended to the Lambda Function Name 
    Type: String
    Default: ""

  pLogBucket:
    Description: Name of Bucket for S3 logs
    Type: String

  pConfigFile:
    Description: Name of json file containing the config elements
    Type: String
    Default: config.json

Mappings:
  RegionMap:
    us-east-1:
      S3hostedzoneID: Z3AQBSTGFYJSTF
      websiteendpoint: s3-website-us-east-1.amazonaws.com
    us-west-1:
      S3hostedzoneID: Z2F56UZL2M1ACD
      websiteendpoint: s3-website-us-west-1.amazonaws.com
    us-west-2:
      S3hostedzoneID: Z3BJ6K6RIION7M
      websiteendpoint: s3-website-us-west-2.amazonaws.com
    eu-west-1:
      S3hostedzoneID: Z1BKCTXD74EZPE
      websiteendpoint: s3-website-eu-west-1.amazonaws.com
    ap-southeast-1:
      S3hostedzoneID: Z3O0J2DXBE1FTB
      websiteendpoint: s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      S3hostedzoneID: Z1WCIGYICN2BYD
      websiteendpoint: s3-website-ap-southeast-2.amazonaws.com
    ap-northeast-1:
      S3hostedzoneID: Z2M4EHUR26P7ZW
      websiteendpoint: s3-website-ap-northeast-1.amazonaws.com
    sa-east-1:
      S3hostedzoneID: Z31GFT0UA1I2HV
      websiteendpoint: s3-website-sa-east-1.amazonaws.com

Resources:

  ImageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      # AccessControl: PublicRead
      BucketName: !Ref pImageBucketName
      LifecycleConfiguration:
        Rules:
        - Id: ExpireOldVersions
          NoncurrentVersionExpirationInDays: '5'
          Status: Enabled
        # - Id: PurgeTmp
        #   Prefix: "tmp/"
        #   ExpirationInDays: '1'
        #   Status: Enabled
        # - Id: PurgeUpload
        #   Prefix: "upload/"
        #   ExpirationInDays: '7'
        #   Status: Enabled  
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - Authorization
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          Id: AllowHTTP
          MaxAge: '300'
      WebsiteConfiguration:
        ErrorDocument: 404.html
        IndexDocument: index.html
      LoggingConfiguration:
        DestinationBucketName: !Ref 'pLogBucket'
        LogFilePrefix: !Join ['', [S3logs/, !Ref pImageBucketName, /]]
      # NotificationConfiguration:
      #   TopicConfigurations:
      #     - Topic: !Ref NewFileTopic
      #       Event: "s3:ObjectCreated:*"
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: prefix
      #               Value: "upload/"

  NewFileTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: smartcamera-NewFileArrived
      # TopicName: smartcamera-NewFileArrived

  NewFileTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties: 
      Topics: 
        - !Ref NewFileTopic
      PolicyDocument:
        Id: AllowS3Notifications
        Version: 2008-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: SNS:Publish
          Resource: !Ref NewFileTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pImageBucketName}"   

  NewFileTriggerLambdaSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt S3TriggerImageProcessingLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref NewFileTopic

  NewFileTriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3TriggerImageProcessingLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref NewFileTopic
      Action: lambda:invokeFunction

  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: ImageBucket
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadGetObjectBasedOnIPAddress
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref ImageBucket , /*]]

  RaspberryPiIAMUser:
    Type: AWS::IAM::User
    Properties:
      Path: /srv/
      Policies:
      - PolicyName: GiveAccessToBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref 'pImageBucketName', /*]]
            - !Join ['', ['arn:aws:s3:::', !Ref 'pImageBucketName']]
          - Effect: Allow
            Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Resource: '*'

  RaspberryPiIAMUserAPIKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'RaspberryPiIAMUser'

  # This IAM Role defines the permissions all the Lambda functions have when the execute
  SecurityCameraLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Access
        # Is this policy needed?
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource: 
              - !Join ['', ['arn:aws:s3:::', !Ref pImageBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pImageBucketName ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: SendEmails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ses:*
            Resource: '*'
      - PolicyName: StartStepFunction
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - states:StartExecution
            Resource: '*'
      - PolicyName: ExecuteRekognition
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - rekognition:*
            Resource: '*'
      - PolicyName: PublishToSNS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sns:publish
            # FIXME
            Resource: '*'

  ErrorHandlerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-errorhandler-${pEnvironment}"
      Description: "smart-security-camera: General Error Handler"
      Handler: error-handler.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile

  RekognitionImageAssessmentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-image-assessment-${pEnvironment}" 
      Description: "smart-security-camera: Sends image from s3 to Amazon Rekognition for Image Processing."
      Handler: rekognition-image-assessment.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn   
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile

  S3TriggerImageProcessingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-trigger-statemachine-${pEnvironment}" 
      Description: "smart-security-camera: Trigger the Statemachine when it recieves and event from the image bucket"
      Handler: s3-trigger-image-processing.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Environment:
        Variables:
          STEP_MACHINE_ARN: !Ref ImageProcessStateMachine
          CONFIG_FILE: !Ref pConfigFile
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile

  SendEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-send-email-${pEnvironment}" 
      Description: "smart-security-camera: AWS Lambda for sending Alert Emails (with image attachment)"
      Handler: send-notification.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile
      Environment:
        Variables:
          S3_URL_PREFIX: !GetAtt [ImageBucket, WebsiteURL]

  S3ArchiveImageLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-archive-image-${pEnvironment}" 
      Description: "smart-security-camera: Archives files after successfull processing"
      Handler: archive-image.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile

  GenerateIndexLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-generate-index-page-${pEnvironment}" 
      Description: "smart-security-camera: Generate html page to browse all images"
      Handler: generate-index-page.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref pImageBucketName
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile

  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-publish-slack-notification-${pEnvironment}" 
      Description: "smart-security-camera: Send the image to Slack"
      Handler: publish-slack-notification.lambda_handler
      Runtime: python2.7
      Timeout: 300
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pLambdaZipFile

  KeyFrameExtractionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "smartcamera-extract-keyframes-${pEnvironment}" 
      Description: "smart-security-camera: Extract jpg every few seconds from video"
      Handler: extract_kf.handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: 3008
      Role: !GetAtt SecurityCameraLambdaRole.Arn
      Code:
        S3Bucket: !Ref pDeployBucket
        S3Key: !Ref pExtractLambdaZipFile


  # This IAM Role defines the permissions the Step Machine requires to execute
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeLambda        
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              # Each Lambda function should be defined here
              - !GetAtt ErrorHandlerLambdaFunction.Arn
              - !GetAtt RekognitionImageAssessmentLambdaFunction.Arn
              - !GetAtt SendEmailLambdaFunction.Arn
              - !GetAtt S3ArchiveImageLambdaFunction.Arn
              - !GetAtt GenerateIndexLambdaFunction.Arn
              - !GetAtt SlackNotificationFunction.Arn
              - !GetAtt KeyFrameExtractionFunction.Arn
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow      

  # Define the Statemachine
  ImageProcessStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Ref AWS::StackName
      DefinitionString: !Sub |-
        {
            "Comment": "Process incoming image files to find out if an email warning is required",
            "StartAt": "KeyFrameExtractionFunction",
            "States": {
                "ErrorHandlerLambdaFunction": {
                    "Type": "Task",
                    "Resource": "${ErrorHandlerLambdaFunction.Arn}" ,
                    "End": true
                },

                "KeyFrameExtractionFunction": {
                    "Type": "Task",
                    "Resource": "${KeyFrameExtractionFunction.Arn}",
                    "Catch": [{
                        "ErrorEquals": ["States.ALL"],
                        "Next": "ErrorHandlerLambdaFunction"
                    }],
                    "Next": "RekognitionImageAssessmentLambdaFunction"
                },
                "RekognitionImageAssessmentLambdaFunction": {
                    "Type": "Task",
                    "Resource": "${RekognitionImageAssessmentLambdaFunction.Arn}",
                    "Catch": [{
                        "ErrorEquals": ["States.ALL"],
                        "Next": "ErrorHandlerLambdaFunction"
                    }],
                    "Next": "AreWeDone"
                },

                "AreWeDone": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "Variable": "$.Alert",
                            "StringEquals": "true",
                            "Next": "S3ArchiveImageLambdaFunction"
                        },
                        {
                            "Variable": "$.Complete",
                            "StringEquals": "true",
                            "Next": "S3ArchiveImageLambdaFunction"
                        }
                    ],
                    "Default": "RekognitionImageAssessmentLambdaFunction"
                },

                "S3ArchiveImageLambdaFunction": {
                    "Type": "Task",
                    "Resource": "${S3ArchiveImageLambdaFunction.Arn}",
                    "Catch": [{
                        "ErrorEquals": ["States.ALL"],
                        "Next": "ErrorHandlerLambdaFunction"
                    }],
                    "Next": "GenerateIndexLambdaFunction"
                },                
                "GenerateIndexLambdaFunction": {
                    "Type": "Task",
                    "Resource": "${GenerateIndexLambdaFunction.Arn}",
                    "Catch": [{
                        "ErrorEquals": ["States.ALL"],
                        "Next": "ErrorHandlerLambdaFunction"
                    }],
                    "Next": "SendEmail"
                },
                "SendEmail": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "Variable": "$.Alert",
                            "StringEquals": "true",
                            "Next": "SendEmailLambdaFunction"
                        }
                    ],
                    "Default": "SlackNotificationFunction"
                },                
                "SendEmailLambdaFunction": {
                    "Type": "Task",
                    "Resource": "${SendEmailLambdaFunction.Arn}",
                    "Catch": [{
                        "ErrorEquals": ["States.ALL"],
                        "Next": "ErrorHandlerLambdaFunction"
                    }],
                    "Next": "SlackNotificationFunction"
                },                
                "SlackNotificationFunction": {
                    "Type": "Task",
                    "Resource": "${SlackNotificationFunction.Arn}",
                    "Catch": [{
                        "ErrorEquals": ["States.ALL"],
                        "Next": "ErrorHandlerLambdaFunction"
                    }],
                    "End": true
                }
            }
        }
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

Outputs:
  StackName:
    Value: !Ref AWS::StackName
  ImageBucket:
    Value: !Ref ImageBucket
  ImageBucketURL:
    Value: !GetAtt [ImageBucket, WebsiteURL]
  ImageBucketDomainName:
    Value: !GetAtt [ImageBucket, DomainName]
  PiUserAccessKey:
    Value: !Ref 'RaspberryPiIAMUserAPIKey'
  PiUserArn:
    Value: !Ref 'RaspberryPiIAMUser'
  PiUserSecretAccessKey:
    Value: !GetAtt [RaspberryPiIAMUserAPIKey, SecretAccessKey]

